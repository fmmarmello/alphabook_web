// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum BudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  CONVERTED
  CANCELLED
}

enum OrderStatus {
  PENDING
  IN_PRODUCTION
  COMPLETED
  DELIVERED
  CANCELLED
  ON_HOLD
}

enum OrderType {
  BUDGET_DERIVED
  DIRECT_ORDER
  RUSH_ORDER
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  cnpjCpf   String
  phone     String
  email     String
  address   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relationships
  orders    Order[]
  budgets   Budget[]
  
  @@index([cnpjCpf])
  @@index([email])
  @@index([active])
}

model Center {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  obs       String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relationships
  orders    Order[]
  budgets   Budget[]
  
  @@index([active])
  @@index([type])
}

model Order {
  id                  Int         @id @default(autoincrement())
  clientId            Int
  centerId            Int
  budgetId            Int?        @unique
  orderType           OrderType   @default(DIRECT_ORDER)
  title               String
  tiragem             Int
  formato             String
  numPaginasTotal     Int
  numPaginasColoridas Int
  valorUnitario       Float
  valorTotal          Float
  prazoEntrega        String
  obs                 String
  date                DateTime    @default(now())
  status              OrderStatus @default(PENDING)
  
  // Extended fields
  numero_pedido       String?
  data_pedido         DateTime?
  data_entrega        DateTime?
  solicitante         String?
  documento           String?
  editorial           String?
  tipo_produto        String?
  cor_miolo           String?
  papel_miolo         String?
  papel_capa          String?
  cor_capa            String?
  laminacao           String?
  acabamento          String?
  shrink              String?
  pagamento           String?
  frete               String?
  
  // Relationships
  client              Client   @relation(fields: [clientId], references: [id])
  center              Center   @relation(fields: [centerId], references: [id])
  budget              Budget?  @relation(fields: [budgetId], references: [id])
  
  @@index([clientId])
  @@index([centerId])
  @@index([budgetId])
  @@index([status])
  @@index([orderType])
  @@index([date])
}

model Budget {
  id                  Int          @id @default(autoincrement())
  clientId            Int?
  centerId            Int?
  status              BudgetStatus @default(DRAFT)
  
  // Core fields
  numero_pedido       String?
  data_pedido         DateTime     @default(now())
  data_entrega        DateTime?
  solicitante         String?
  documento           String?
  editorial           String?
  tipo_produto        String?
  titulo              String
  tiragem             Int
  formato             String
  total_pgs           Int
  pgs_colors          Int
  cor_miolo           String?
  papel_miolo         String?
  papel_capa          String?
  cor_capa            String?
  laminacao           String?
  acabamento          String?
  shrink              String?
  centro_producao     String?
  observacoes         String?
  preco_unitario      Float
  preco_total         Float
  prazo_producao      String?
  pagamento           String?
  frete               String?
  
  // Audit trail fields
  submittedAt         DateTime?
  approvedAt          DateTime?
  rejectedAt          DateTime?
  cancelledAt         DateTime?
  convertedAt         DateTime?
  approvedById        Int?
  rejectedById        Int?
  
  // Legacy compatibility
  approved            Boolean      @default(false)
  
  // Relationships
  client              Client?      @relation(fields: [clientId], references: [id])
  center              Center?      @relation(fields: [centerId], references: [id])
  order               Order?
  approvedBy          User?        @relation("BudgetApprovedBy", fields: [approvedById], references: [id])
  rejectedBy          User?        @relation("BudgetRejectedBy", fields: [rejectedById], references: [id])
  
  @@index([clientId])
  @@index([centerId])
  @@index([status])
  @@index([approvedById])
  @@index([data_pedido])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                    Int      @id @default(autoincrement())
  email                 String   @unique
  password              String
  name                  String
  role                  Role     @default(USER)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Budget approval relationships
  budgetsApproved       Budget[] @relation("BudgetApprovedBy")
  budgetsRejected       Budget[] @relation("BudgetRejectedBy")
  
  @@index([email])
  @@index([role])
}